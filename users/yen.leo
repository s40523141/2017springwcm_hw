<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160921213353.1"><vh>2016fall 簡報與網誌樣板系統</vh></v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button pelican-blog</vh></v>
</v>
<v t="amd.20151215180106.1" a="E"><vh>設定與開發</vh>
<v t="amd.20151216151325.1" a="E"><vh>@clean index.html</vh>
<v t="amd.20161004083800.1" a="E"><vh>html</vh>
<v t="amd.20161004083800.2"><vh>head</vh></v>
<v t="amd.20161004083800.5" a="E"><vh>body</vh>
<v t="amd.20161004083800.6" a="E"><vh>reveal div</vh>
<v t="amd.20161004083800.7" a="E"><vh>slides div</vh>
<v t="amd.20161004095719.1"><vh>封面投影片</vh>
<v t="amd.20161004095719.2"><vh>封面投影片內容</vh></v>
</v>
<v t="yen.20161016023122.1" a="E"><vh>快捷鍵</vh>
<v t="yen.20161016023122.2"><vh>投影片快捷鍵</vh></v>
</v>
<v t="leo.20170622223440.1" a="E"><vh>如何設定ipv6網路</vh>
<v t="leo.20170622223452.1"><vh>如何設定ipv6網路</vh></v>
</v>
<v t="leo.20170622231501.1" a="E"><vh>製作網路線</vh>
<v t="leo.20170622231513.1"><vh>製作網路線</vh></v>
</v>
<v t="leo.20170623000648.1" a="E"><vh>製作網路線影片</vh>
<v t="leo.20170623000647.1"><vh>製作網路線影片</vh></v>
</v>
<v t="leo.20170622223746.1" a="E"><vh>VirtualBox安裝並安裝Ubuntu於VirtualBox</vh>
<v t="leo.20170622223747.1"><vh>VirtualBox安裝並安裝Ubuntu於VirtualBox</vh></v>
</v>
<v t="leo.20170622235724.1" a="E"><vh>VirtualBox安裝並安裝Ubuntu於VirtualBox影片</vh>
<v t="leo.20170622235758.1"><vh>VirtualBox安裝並安裝Ubuntu於VirtualBox影片</vh></v>
</v>
<v t="leo.20170622224427.1" a="E"><vh>Ubuntu 16.04 環境下安裝並設定裝Stunnel 與 Fossil SCM</vh>
<v t="leo.20170622224438.1"><vh>Ubuntu 16.04 環境下安裝並設定裝Stunnel 與 Fossil SCM</vh></v>
</v>
<v t="leo.20170623000542.1" a="E"><vh>Ubuntu 16.04 環境下安裝並設定裝Stunnel 與 Fossil SCM影片</vh>
<v t="leo.20170623000550.1"><vh>Ubuntu 16.04 環境下安裝並設定裝Stunnel 與 Fossil SCM影片</vh></v>
</v>
<v t="leo.20170622222904.1" a="E"><vh>何謂機械設計</vh>
<v t="leo.20170622222934.1"><vh>何謂機械設計</vh></v>
</v>
<v t="yen.20161016012809.1"><vh>各式內容引用範例</vh>
<v t="yen.20161016012809.2" a="E"><vh>導入數學符號與方程式</vh>
<v t="yen.20161016012809.3"><vh>LaTeX 格式方程式</vh></v>
</v>
<v t="yen.20161016012809.4" a="E"><vh>導入縮排程式碼</vh>
<v t="yen.20161016012809.5"><vh>引用程式碼</vh></v>
</v>
<v t="yen.20161016012809.6" a="E"><vh>導入影片</vh>
<v t="yen.20161016012809.7"><vh>iframe 導入影片</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="leo.20151213230723.1" a="E"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>蔡兵常 所寫的網誌文章</vh>
<v t="leo.20170426225951.1"><vh>@edit 20160407.md</vh></v>
<v t="leo.20170426230358.1"><vh>@edit 20160407-1.md</vh></v>
<v t="leo.20170426230529.1"><vh>@edit 20160414.md</vh></v>
<v t="leo.20170426230556.1"><vh>@edit 20160421.md</vh></v>
<v t="leo.20170426230613.1"><vh>@edit 20160423.md</vh></v>
</v>
</v>
<v t="amd.20160106094754.1"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>yen 所寫的 pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="amd.20161004202833.1"><vh>@edit ../README.md</vh></v>
<v t="yen.20161022111056.1"><vh>@button https server</vh></v>
<v t="leo.20161214221354.1"><vh>@button ipv6 https server</vh></v>
<v t="yen.20161022151749.1"><vh>產生 .key 與 .crt</vh></v>
<v t="leo.20161229212621.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20161229212621.3"><vh>Recovered node "ch01 print() 與 input()" from @clean 20161217.md</vh>
<v t="leo.20161229212621.4"><vh>old:ch01 print() 與 input()</vh></v>
<v t="leo.20161229212621.5"><vh>new:ch01 print() 與 input()</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題 (請注意各文章的標題不可相同, 比較保險的作法是冠上四個學號尾碼)
Date: 2016-09-2 12:00
Category: 類別
Tags: 標籤
Author: yen

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容

程式碼

&lt;pre class="brush: python;"&gt;
print("hello")
&lt;/pre&gt;</t>
<t tx="amd.20151216151325.1">@language xml
@tabwidth -4
@others

</t>
<t tx="amd.20160106093454.1">
    
</t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160921213353.1"></t>
<t tx="amd.20161004083800.1">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="amd.20161004083800.2">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;    
2016 Fall 計算機程式課程
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="amd.20161004083800.5">&lt;body&gt;
@others
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/head.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/js/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/zoom-js/zoom.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/notes/notes.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/math/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="amd.20161004083800.6">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004083800.7">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004095719.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004095719.2"># 2016Fall 計算機程式課程

### 虎科大機械設計工程系

&lt;small&gt;
Created by [40523141](http://s40523141.github.io/kmolab/blog/)
&lt;/small&gt;

[40523141](blog/index.html)

</t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
<t tx="leo.20161214221354.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '2001:288:6004:17:3004::808'
    server_address = (ipv6_address, 140.130.17.17)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("140.130.17.17 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="leo.20161229212621.2"></t>
<t tx="leo.20161229212621.3">(uncached) leo.20161216135359.2
Diff...
  &lt;!-- ch01 基本的列印與輸入函式 --&gt;
  &lt;script type="text/python3"&gt;
  from browser import document
  from browser import alert
  
  '''
      # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
      #01-01.py
      print ("Hello World!")
      #01-02.py
      thetext = input("Enter some text ")
      print ("This is what you entered:")
      print (thetext)
      #01-03.py
      # Note that \n within quote marks forces a new line to be printed
      thetext = input("Enter some text\n")
      print ("This is what you entered:")
      print (thetext)
      #01-04.py
      prompt  = "Enter a some text "
      thetext = input(prompt)
      print ("This is what you entered:")
      print (thetext)
  '''
  
  def get_input(ev):
-     the_input= input("上課不會滑手機")
?                       ^^^^^^^
+     the_input= input("請輸入")
?                       ^^^
-     alert("上課不會滑手機:"+str(the_input))
+     alert("輸入為:"+str(上課不會滑手機))
  
  document['ch01'].bind('click',get_input)
  &lt;/script&gt;
  &lt;button id="ch01"&gt;40523137&lt;/button&gt;
  
  &lt;pre class="brush: python"&gt;
  &lt;script type="text/python3"&gt;
  from browser import document
  from browser import alert
  
  def get_input(ev):
      the_input= input("請輸入")
      alert("輸入為:"+str(the_input))
  
  document['ch01'].bind('click',get_input)
  &lt;/script&gt;
  &lt;button id="ch01"&gt;取輸入後, 列印出來&lt;/button&gt;
- &lt;/pre&gt;
?       -
+ &lt;/pre&gt;</t>
<t tx="leo.20161229212621.4">&lt;!-- ch01 基本的列印與輸入函式 --&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

'''
    # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
    #01-01.py
    print ("Hello World!")
    #01-02.py
    thetext = input("Enter some text ")
    print ("This is what you entered:")
    print (thetext)
    #01-03.py
    # Note that \n within quote marks forces a new line to be printed
    thetext = input("Enter some text\n")
    print ("This is what you entered:")
    print (thetext)
    #01-04.py
    prompt  = "Enter a some text "
    thetext = input(prompt)
    print ("This is what you entered:")
    print (thetext)
'''

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(上課不會滑手機))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;40523137&lt;/button&gt;

&lt;pre class="brush: python"&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;取輸入後, 列印出來&lt;/button&gt;
&lt;/pre&gt;</t>
<t tx="leo.20161229212621.5">&lt;!-- ch01 基本的列印與輸入函式 --&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

'''
    # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
    #01-01.py
    print ("Hello World!")
    #01-02.py
    thetext = input("Enter some text ")
    print ("This is what you entered:")
    print (thetext)
    #01-03.py
    # Note that \n within quote marks forces a new line to be printed
    thetext = input("Enter some text\n")
    print ("This is what you entered:")
    print (thetext)
    #01-04.py
    prompt  = "Enter a some text "
    thetext = input(prompt)
    print ("This is what you entered:")
    print (thetext)
'''

def get_input(ev):
    the_input= input("上課不會滑手機")
    alert("上課不會滑手機:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;40523137&lt;/button&gt;

&lt;pre class="brush: python"&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;取輸入後, 列印出來&lt;/button&gt;
&lt;/pre&gt;
</t>
<t tx="leo.20170622222904.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


		</t>
<t tx="leo.20170622222934.1"># 何謂機械設計

&lt;small&gt;
設計是一種表達，產生內容可去做機密配置 表達方式，口語、文字、2D、理論、實體、軟體。
&lt;/small&gt;
* 機：很多元件組成可達成精巧配置
* 械：控制在一個範圍有固定功能
* 設：必須明確表達結果之具體規劃
* 計：經過詳細思慮考量過程
* 利用虛實整合的機械設計工程師</t>
<t tx="leo.20170622223440.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


		</t>
<t tx="leo.20170622223452.1"># 如何設定ipv6網路

&lt;small&gt;
* 連線到IPV6 的網路設定教學
* 連線到IPV6 的網路設定教學
* 首先進入網路和共用中心
* 選擇乙太網路內容
* 把IPV4打勾按掉 選擇IPV6 然後打勾IPV6 點選內容
* 把使用下列DNS伺服器網址打勾
* 慣用DNS伺服器:輸入學校的IPV6 IP
* 其他DNS伺服器:中華電信的IPV6 IP
* 設定完後 進入網際網路的設定
* 點開 Proxy 設定
* 點選LAN設定
* 把Proxy伺服器打勾網址用系館的IPV6 連接阜打3128
* 就能完成IPV6的連線
&lt;/small&gt;</t>
<t tx="leo.20170622223746.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


		</t>
<t tx="leo.20170622223747.1"># VirtualBox安裝並安裝Ubuntu於VirtualBox

&lt;small&gt;
* 自訂系統名稱
* 類型選擇Linux
* 版本選擇Ubuntu64-bit
* 記憶體大小設定(依照本機來判斷給予多少記憶體)
* 硬碟選擇立即建立虛擬硬碟
* 設定虛擬機要存放的位置、給予虛擬硬碟多少容量(建議10GB以上)
* 硬碟類型選擇VHD(虛擬硬碟)，設定好之後即可建立一個虛擬主機(或稱虛擬電腦)。
* 在建立完成後，需要設定之後內部要使用的網路，不然就沒有網路啦！ 點選左上角的設定值→網路，附加選擇的是橋接介面卡，而MAC位址需判斷自身網路狀況輸入，因為我用的是學校宿舍網路，打上網路的實體位址。完成後點下OK鈕。
* 接下來就可以按下啟動鍵了！啟動後虛擬機會顯示選取啟動的磁碟，這時候拿出一開始準備的Ubuntu，瀏覽選擇後按下啟動，就能在使用Ubuntu的系統下開啟VirtualBox虛擬主機。 接著在設定密碼及安裝一些軟件後，就已經成功安裝完成。
&lt;/small&gt;</t>
<t tx="leo.20170622224427.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170622224438.1"># Ubuntu 16.04 環境下安裝並設定裝Stunnel 與 Fossil SCM

&lt;small&gt;
* 練習如何在 Ubuntu 操作系統中, 安裝並設定 Stunnel 後與 Fossil SCM server 結合啟動。
* 首先，開啟終端機(terminal)。
* 開始安裝Stunnel 與 Fossil SCM：
* sudo apt update
* sudo apt install stunnel4 -y
* sudo apt install fossil
* 輸入完畢後，接下來需要更改某些資料夾目錄中的環境變數及做開機啟動設定。
* sudo vi /etc/environment
* 其中vi代表進入目錄並更改或設定其內容。
* 進入後按下o，即進入編寫模式及換到下一行，輸入：
* HTTPS=on
* 接著按下esc鍵，輸入:wq，其中w代表編寫(write)、 q代表離開(quit)。
* sudo vi /etc/default/stunnel4
* 進入後將ENABLED=0中的"0"改為"1"。
* 到這裡即完成環境變數以及開機啟動設定。
* 最後我們要設定Stunnel 並執行 fossil http 指令，然後在特定目錄中建立兩個檔案。
* 分別是localhost.key 與 localhost.crt
* 首先，更換目錄：
* cd /etc/stunnel/
* 進入目錄後，即可編輯並建立這兩個我們所需的檔案：
* ls -s
* sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt
* sudo vi /etc/stunnel/stunnel.conf
* 進入後，將下列資料輸入：
* [https] accept = 此電腦的IPv4ip:443 accept = :::443(此為IPv6，若無需使用可直接跳過不打) cert = /etc/stunnel/localhost.crt key = /etc/stunnel/localhost.key exec = /usr/bin/fossil execargs = /usr/bin/fossil http /home/user/repository/自己的小組.fossil -- https --nojail
* 其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail
* 最後輸入sudo /etc/init.d/stunnel4 restart後，重新開機虛擬機即 可以https: //yourip 連結至 mde2a1.fossil 網際管理介面！
&lt;/small&gt;</t>
<t tx="leo.20170622231501.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


		</t>
<t tx="leo.20170622231513.1"># 製作網路線

&lt;small&gt;
* 首先準備好材料: 8蕊網路線 RJ-45接頭 剪刀 壓線鉗
* 接下來就開始製作 把網路線的外層塑膠殼剪開 裡面會有8條有顏色的線 將他們整理好並且剪到一樣長
* 網路線有2種接法
* 一般傳輸用網路線色對規則 (兩端的網路頭皆為以下接法) 白橙、橙、白綠、藍、白藍、綠、白棕、棕
* 兩台電腦資料對傳用色對規則 (又稱跳接法、一頭以正常傳輸色對接法、另一頭則為以下接法) 白綠、綠、白橙、藍、白藍、橙、白棕、棕
* 先用壓線鉗把外套拆掉.再把裡面4對線分別分開 把8條線按照(白橘.橘.白綠.藍.白藍.綠.白棕.棕) 用整齊再對齊.套入接頭用力壓到底 再用壓線鉗壓緊.大功告成
* 完成以上步驟後就能完成網路線製作
&lt;/small&gt;</t>
<t tx="leo.20170622235724.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;</t>
<t tx="leo.20170622235758.1">&lt;iframe src="https://player.vimeo.com/video/215032549" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</t>
<t tx="leo.20170623000542.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170623000550.1">&lt;iframe src="https://player.vimeo.com/video/215027413" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</t>
<t tx="leo.20170623000647.1">&lt;iframe src="https://player.vimeo.com/video/214995409" width="640" height="1138" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</t>
<t tx="leo.20170623000648.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


	</t>
<t tx="yen.20161016012809.1">&lt;section&gt;
@others
&lt;/section&gt;
I</t>
<t tx="yen.20161016012809.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20161016012809.3"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="yen.20161016012809.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20161016012809.5">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="yen.20161016012809.6">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016012809.7">## 使用 iframe 導入影片

### 導入影片 template

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="yen.20161016023122.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20161016023122.2"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)

</t>
<t tx="yen.20161022111056.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 8443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("8443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20161022151749.1">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
</tnodes>
</leo_file>
